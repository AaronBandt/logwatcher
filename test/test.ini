[test]
log_name_format: /tmp/access_test
notify_schedule: 5

[logwatcher]
log_name_format: /tmp/access_test
notify_schedule: 5
sla_ms: 300

#plugins: kafka_logger

#use_graphite: True

distinguisher: test
ignore_pattern: (/healthcheck|nagios)

# how long to wait for a log to show up before checking again
nologsleep: 10

# how often to send metrics

use_brand: 1

brand_regex: \[curPubCode=([\w_-]*)\]
processing_time_regex: \s([\d.]*)$
processing_time_units: ms

metrics_count: return_code isCust apiver 
metrics_ratio: return_code t_dbTime t_wsTime t_oTime t_pTime t_ofrTime t_rvwTime t_daoTimeContent t_daoTimeListing t_rvwConTimeout t_rvwSoTimeout t_ofrConTimeout t_ofrSoTimeout t_tomcatTime cached apiver 
metric_return_code_regex: HTTP/1.\d. (\d\d\d)[ ]
metric_isCust_regex: \[isCust=(\d)\]
metric_cached_regex: \[(cache)File=/


# Distribution Metrics
metrics_dist: 
metric_ptd_regex: \s([\d.]*)$
metric_ptd_bucket_count: 11
metric_ptd_bucket_size: 100

metric_ptds_regex: \s([\d.]*)$
metric_ptds_bucket_count: 11
metric_ptds_bucket_size: 1000

metric_ptdms_regex: \s([\d.]*)$
metric_ptdms_bucket_count: 11
metric_ptdms_bucket_size: 10

metric_rtdms_regex: \[rvwTime=([\d.]*)\]
metric_rtdms_bucket_count: 11
metric_rtdms_bucket_size: 10

metric_apiver_regex: /(v\d)[^\w]

metrics_sum: price bytes t_dbTime t_wsTime t_oTime t_pTime t_capTime t_capConTimeout t_capSoTimeout t_capFailed t_daoTimeContent t_daoTimeListing t_rvwConTimeout t_rvwSoTimeout t_ofrConTimeout t_ofrSoTimeout t_tomcatTime Total_Processing_Time_v2 Total_Processing_Time_v1  

metric_price_regex: \[price=([\d.]+)\]
metric_bytes_regex: HTTP/1.1.\ \d\d\d (\d+)\ \"

metric_t_dbTime_regex: \[dbTime=([\d.]+)\]
metric_t_oTime_regex: \[oTime=([\d.]+)\]
metric_t_pTime_regex: \[pTime=([\d.]+)\]
metric_t_capTime_regex: \[capTime=([\d.]+)\]
metric_t_capConTimeout_regex: \[capConTimeout=([\d.]+)\]
metric_t_capSoTimeout_regex: \[capSoTimeout=([\d.]+)\]
metric_t_capFailed_regex: \[capFailed=([\d.]+)\]
metric_t_ofrTime_regex: \[ofrTime=([\d.]+)\]
metric_t_rvwTime_regex: \[rvwTime=([\d.]+)\]
metric_t_rvwConTimeout_regex: \[rvwConTimeout=([\d.]+)\]
metric_t_rvwSoTimeout_regex: \[rvwSoTimeout=([\d.]+)\]
metric_t_ofrConTimeout_regex: \[ofrConTimeout=([\d.]+)\]
metric_t_ofrSoTimeout_regex: \[ofrSoTimeout=([\d.]+)\]
metric_t_daoTimeContent_regex: \[daoTimecontent=([\d.]+)\]
metric_t_daoTimeListing_regex: \[daoTimelisting=([\d.]+)\]
metric_t_wsTime_regex: \[wsTime=([\d.]+)\]
metric_t_tomcatTime_regex: \[tomcatTime=([\d.]+)\]

# these are very fragile for some reason, don't like [^p] or \s?
metric_Total_Processing_Time_v1_regex: .* /profile/\W.* ([\d.]*)$
metric_Total_Processing_Time_v2_regex: .*v2.* ([\d.]*)$

# user-defined calculated metrics
#metrics_calc: #Avg_Processing_Time_v1_ms Avg_Processing_Time_v2_ms
metric_Avg_Processing_Time_v1_ms_expression: s/Total_Processing_Time_v1 / c/apiver_NotSet
metric_Avg_Processing_Time_v2_ms_expression: s/Total_Processing_Time_v2 / c/apiver_v2

# not used yet
#metrics_list: 

# send these once at startup
#metrics_prime: return_code_500:0 return_code_500_ratio:0

